Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PREDICATE

Grammar

Rule 0     S' -> expr
Rule 1     expr -> expr AND expr
Rule 2     expr -> ALPHABET
Rule 3     expr -> expr OR expr
Rule 4     expr -> NEGATION expr
Rule 5     expr -> expr IMPLIES expr
Rule 6     expr -> expr SIMPLIES expr
Rule 7     expr -> LPAREN expr RPAREN

Terminals, with rules where they appear

ALPHABET             : 2
AND                  : 1
IMPLIES              : 5
LPAREN               : 7
NEGATION             : 4
OR                   : 3
PREDICATE            : 
RPAREN               : 7
SIMPLIES             : 6
error                : 

Nonterminals, with rules where they appear

expr                 : 1 1 3 3 4 5 5 6 6 7 0

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . expr AND expr
    (2) expr -> . ALPHABET
    (3) expr -> . expr OR expr
    (4) expr -> . NEGATION expr
    (5) expr -> . expr IMPLIES expr
    (6) expr -> . expr SIMPLIES expr
    (7) expr -> . LPAREN expr RPAREN

    ALPHABET        shift and go to state 2
    NEGATION        shift and go to state 3
    LPAREN          shift and go to state 4

    expr                           shift and go to state 1

state 1

    (0) S' -> expr .
    (1) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (5) expr -> expr . IMPLIES expr
    (6) expr -> expr . SIMPLIES expr

    AND             shift and go to state 5
    OR              shift and go to state 6
    IMPLIES         shift and go to state 7
    SIMPLIES        shift and go to state 8


state 2

    (2) expr -> ALPHABET .

    AND             reduce using rule 2 (expr -> ALPHABET .)
    OR              reduce using rule 2 (expr -> ALPHABET .)
    IMPLIES         reduce using rule 2 (expr -> ALPHABET .)
    SIMPLIES        reduce using rule 2 (expr -> ALPHABET .)
    $end            reduce using rule 2 (expr -> ALPHABET .)
    RPAREN          reduce using rule 2 (expr -> ALPHABET .)


state 3

    (4) expr -> NEGATION . expr
    (1) expr -> . expr AND expr
    (2) expr -> . ALPHABET
    (3) expr -> . expr OR expr
    (4) expr -> . NEGATION expr
    (5) expr -> . expr IMPLIES expr
    (6) expr -> . expr SIMPLIES expr
    (7) expr -> . LPAREN expr RPAREN

    ALPHABET        shift and go to state 2
    NEGATION        shift and go to state 3
    LPAREN          shift and go to state 4

    expr                           shift and go to state 9

state 4

    (7) expr -> LPAREN . expr RPAREN
    (1) expr -> . expr AND expr
    (2) expr -> . ALPHABET
    (3) expr -> . expr OR expr
    (4) expr -> . NEGATION expr
    (5) expr -> . expr IMPLIES expr
    (6) expr -> . expr SIMPLIES expr
    (7) expr -> . LPAREN expr RPAREN

    ALPHABET        shift and go to state 2
    NEGATION        shift and go to state 3
    LPAREN          shift and go to state 4

    expr                           shift and go to state 10

state 5

    (1) expr -> expr AND . expr
    (1) expr -> . expr AND expr
    (2) expr -> . ALPHABET
    (3) expr -> . expr OR expr
    (4) expr -> . NEGATION expr
    (5) expr -> . expr IMPLIES expr
    (6) expr -> . expr SIMPLIES expr
    (7) expr -> . LPAREN expr RPAREN

    ALPHABET        shift and go to state 2
    NEGATION        shift and go to state 3
    LPAREN          shift and go to state 4

    expr                           shift and go to state 11

state 6

    (3) expr -> expr OR . expr
    (1) expr -> . expr AND expr
    (2) expr -> . ALPHABET
    (3) expr -> . expr OR expr
    (4) expr -> . NEGATION expr
    (5) expr -> . expr IMPLIES expr
    (6) expr -> . expr SIMPLIES expr
    (7) expr -> . LPAREN expr RPAREN

    ALPHABET        shift and go to state 2
    NEGATION        shift and go to state 3
    LPAREN          shift and go to state 4

    expr                           shift and go to state 12

state 7

    (5) expr -> expr IMPLIES . expr
    (1) expr -> . expr AND expr
    (2) expr -> . ALPHABET
    (3) expr -> . expr OR expr
    (4) expr -> . NEGATION expr
    (5) expr -> . expr IMPLIES expr
    (6) expr -> . expr SIMPLIES expr
    (7) expr -> . LPAREN expr RPAREN

    ALPHABET        shift and go to state 2
    NEGATION        shift and go to state 3
    LPAREN          shift and go to state 4

    expr                           shift and go to state 13

state 8

    (6) expr -> expr SIMPLIES . expr
    (1) expr -> . expr AND expr
    (2) expr -> . ALPHABET
    (3) expr -> . expr OR expr
    (4) expr -> . NEGATION expr
    (5) expr -> . expr IMPLIES expr
    (6) expr -> . expr SIMPLIES expr
    (7) expr -> . LPAREN expr RPAREN

    ALPHABET        shift and go to state 2
    NEGATION        shift and go to state 3
    LPAREN          shift and go to state 4

    expr                           shift and go to state 14

state 9

    (4) expr -> NEGATION expr .
    (1) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (5) expr -> expr . IMPLIES expr
    (6) expr -> expr . SIMPLIES expr

    AND             reduce using rule 4 (expr -> NEGATION expr .)
    OR              reduce using rule 4 (expr -> NEGATION expr .)
    IMPLIES         reduce using rule 4 (expr -> NEGATION expr .)
    SIMPLIES        reduce using rule 4 (expr -> NEGATION expr .)
    $end            reduce using rule 4 (expr -> NEGATION expr .)
    RPAREN          reduce using rule 4 (expr -> NEGATION expr .)

  ! AND             [ shift and go to state 5 ]
  ! OR              [ shift and go to state 6 ]
  ! IMPLIES         [ shift and go to state 7 ]
  ! SIMPLIES        [ shift and go to state 8 ]


state 10

    (7) expr -> LPAREN expr . RPAREN
    (1) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (5) expr -> expr . IMPLIES expr
    (6) expr -> expr . SIMPLIES expr

    RPAREN          shift and go to state 15
    AND             shift and go to state 5
    OR              shift and go to state 6
    IMPLIES         shift and go to state 7
    SIMPLIES        shift and go to state 8


state 11

    (1) expr -> expr AND expr .
    (1) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (5) expr -> expr . IMPLIES expr
    (6) expr -> expr . SIMPLIES expr

    AND             reduce using rule 1 (expr -> expr AND expr .)
    OR              reduce using rule 1 (expr -> expr AND expr .)
    IMPLIES         reduce using rule 1 (expr -> expr AND expr .)
    SIMPLIES        reduce using rule 1 (expr -> expr AND expr .)
    $end            reduce using rule 1 (expr -> expr AND expr .)
    RPAREN          reduce using rule 1 (expr -> expr AND expr .)

  ! AND             [ shift and go to state 5 ]
  ! OR              [ shift and go to state 6 ]
  ! IMPLIES         [ shift and go to state 7 ]
  ! SIMPLIES        [ shift and go to state 8 ]


state 12

    (3) expr -> expr OR expr .
    (1) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (5) expr -> expr . IMPLIES expr
    (6) expr -> expr . SIMPLIES expr

    AND             reduce using rule 3 (expr -> expr OR expr .)
    OR              reduce using rule 3 (expr -> expr OR expr .)
    IMPLIES         reduce using rule 3 (expr -> expr OR expr .)
    SIMPLIES        reduce using rule 3 (expr -> expr OR expr .)
    $end            reduce using rule 3 (expr -> expr OR expr .)
    RPAREN          reduce using rule 3 (expr -> expr OR expr .)

  ! AND             [ shift and go to state 5 ]
  ! OR              [ shift and go to state 6 ]
  ! IMPLIES         [ shift and go to state 7 ]
  ! SIMPLIES        [ shift and go to state 8 ]


state 13

    (5) expr -> expr IMPLIES expr .
    (1) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (5) expr -> expr . IMPLIES expr
    (6) expr -> expr . SIMPLIES expr

    IMPLIES         reduce using rule 5 (expr -> expr IMPLIES expr .)
    SIMPLIES        reduce using rule 5 (expr -> expr IMPLIES expr .)
    $end            reduce using rule 5 (expr -> expr IMPLIES expr .)
    RPAREN          reduce using rule 5 (expr -> expr IMPLIES expr .)
    AND             shift and go to state 5
    OR              shift and go to state 6

  ! AND             [ reduce using rule 5 (expr -> expr IMPLIES expr .) ]
  ! OR              [ reduce using rule 5 (expr -> expr IMPLIES expr .) ]
  ! IMPLIES         [ shift and go to state 7 ]
  ! SIMPLIES        [ shift and go to state 8 ]


state 14

    (6) expr -> expr SIMPLIES expr .
    (1) expr -> expr . AND expr
    (3) expr -> expr . OR expr
    (5) expr -> expr . IMPLIES expr
    (6) expr -> expr . SIMPLIES expr

    IMPLIES         reduce using rule 6 (expr -> expr SIMPLIES expr .)
    SIMPLIES        reduce using rule 6 (expr -> expr SIMPLIES expr .)
    $end            reduce using rule 6 (expr -> expr SIMPLIES expr .)
    RPAREN          reduce using rule 6 (expr -> expr SIMPLIES expr .)
    AND             shift and go to state 5
    OR              shift and go to state 6

  ! AND             [ reduce using rule 6 (expr -> expr SIMPLIES expr .) ]
  ! OR              [ reduce using rule 6 (expr -> expr SIMPLIES expr .) ]
  ! IMPLIES         [ shift and go to state 7 ]
  ! SIMPLIES        [ shift and go to state 8 ]


state 15

    (7) expr -> LPAREN expr RPAREN .

    AND             reduce using rule 7 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 7 (expr -> LPAREN expr RPAREN .)
    IMPLIES         reduce using rule 7 (expr -> LPAREN expr RPAREN .)
    SIMPLIES        reduce using rule 7 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 7 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 7 (expr -> LPAREN expr RPAREN .)

